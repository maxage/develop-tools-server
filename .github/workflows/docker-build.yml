name: Build and Push Docker Image

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## Docker Image
          
          **Image:** `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
          
          **Pull Command:**
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ```
          
          **Docker Compose:**
          ```yaml
          services:
            develop-tools-server:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              ports:
                - "5083:3022"
              env_file:
                - .env
              environment:
                - NODE_ENV=production
                - PORT=3022
              volumes:
                - ./app_data:/app/data
          ```
          
          ## Quick Start
          
          1. Clone the repository
          2. Copy `env.example` to `.env` and configure your API keys:
             ```bash
             cp env.example .env
             vim .env  # 编辑配置文件
             ```
          3. Run `docker-compose up -d`
        draft: false
        prerelease: false
